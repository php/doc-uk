<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7d7b378abd302430b8ce7cedb4b78c7033f5e88c Maintainer: mproshchuk Status: ready -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Область видимості</title>
  <para>
   Області видимості властивостей, методів або (починаючи з PHP 7.1.0) констант
   можуть визначатись через ключові слова <literal>public</literal>
   (загальнодоступно), <literal>protected</literal> (захищено) чи
   <literal>private</literal> (закрито). Доступ до членів класу, оголошених як
   загальнодоступні, дозволено всюди. Члени класу, оголошені як захищені,
   доступні лише всередині самого класу, а також через класи-нащадки та
   батьківські класи. Члени класу, оголошені як закриті можуть бути доступні
   лише в класі, де вони визначені.
  </para>

  <sect2 xml:id="language.oop5.visibility-members">
   <title>Видимість властивості</title>
   <para>
    Властивості класу можуть оголошуватись як загальнодоступні, захищені чи
    закриті. Властивість, оголошена без ключового слова видимості, вважається
    загальнодоступною.
   </para>
   <example>
    <title>Оголошення властивості</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Визначення MyClass
 */
class MyClass
{
    public $public = 'Загальнодоступна';
    protected $protected = 'Захищена';
    private $private = 'Закрита';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Працює
echo $obj->protected; // Фатальна помилка
echo $obj->private; // Фатальна помилка
$obj->printHello(); // Виводить Загальнодоступна, Захищена та Закрита


/**
 * Визначення MyClass2
 */
class MyClass2 extends MyClass
{
    // Ми можемо перевизначити public- та protected-властивості, але не private
    public $public = 'Public2';
    protected $protected = 'Захищена2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public; // Працює
echo $obj2->protected; // Фатальна помилка
echo $obj2->private; // Невизначено
$obj2->printHello(); // Виводить Загальнодоступна2, Захищена2, Закрита

?> 
]]>
    </programlisting>
   </example>
   <sect3 xml:id="language.oop5.visibility-members-aviz">
    <title>Асиметрична видимість властивості</title>
    <simpara>
     Починаючи з PHP 8.4, властивості можуть мати асиметричну видимість, з
     різними областями видимості для читання (<literal>get</literal>) та запису
     (<literal>set</literal>). Зокрема видимість <literal>set</literal> можна
     вказати окремо, якщо та не є ширшою за типову.
    </simpara>
    <example>
     <title>Асиметрична видимість властивості</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    public function __construct(
        public private(set) string $title,
        public protected(set) string $author,
        protected private(set) int $pubYear,
    ) {}
}

class SpecialBook extends Book
{
    public function update(string $author, int $year): void
    {
        $this->author = $author; // Працює
        $this->pubYear = $year; // Fatal Error
    }
}

$b = new Book('Програмування на PHP', 'Петро Петрук', 2024);

echo $b->title; // Працює
echo $b->author; // Працює
echo $b->pubYear; // Fatal Error

$b->title = 'Як не програмувати на PHP'; // Fatal Error
$b->author = 'Павло Петрук'; // Fatal Error
$b->pubYear = 2023; // Fatal Error
?>
]]>
     </programlisting>
    </example>
    <para>Є кілька застережень щодо асиметричної видимості:</para>
    <itemizedlist>
     <listitem>
      <simpara>
       Тільки властивості з вказаним типом можуть мати окрему видимість
       <literal>set</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Видимість <literal>set</literal> має бути однаковою з
       <literal>get</literal> або вужчою. Тобто код <code>public
       protected(set)</code> та <code>protected protected(set)</code>
       працюватиме, але <code>protected public(set)</code> викличе помилку
       синтаксису.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Якщо властивість є загальнодоступною (<literal>public</literal>), то
       основну видимість можна не оголошувати. Тобто, код <code>public
       private(set)</code> і <code>private(set)</code> працюватиме однаково.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Властивість з видимістю <literal>private(set)</literal> автоматично є
       фінальною (<literal>final</literal>), та не може бути змінена в
       класі-нащадку.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       На отримання посилання впливає видимість <literal>set</literal>, а не
       <literal>get</literal>. Це тому, що посилання може бути використано, щоб
       змінити значення властивості.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Відповідно, запис до властивості-масиву включає в себе як
       <literal>get</literal>-, так і <literal>set</literal>-операції, а отже до
       уваги братиметься видимість <literal>set</literal>, як більш
       обмежувальна.
      </simpara>
     </listitem>
    </itemizedlist>
    <simpara>
     Клас-нащадок може перевизначати властивість батьківського класу, якщо та не
     фінальна (<literal>final</literal>). Таким чином він може розширити основну
     видимість, або видимість <literal>set</literal>, за умови, що нова
     видимість є такою самою або ширшою, ніж в батьківського класу. Слід зважати
     на те, що якщо закрита (<literal>private</literal>) властивість
     перезаписується, то це не впливає на батьківську властивість, а створює
     нову властивість з іншою внутрішньою назвою.
    </simpara>
    <example>
     <title>Асиметричне наслідування властивості</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    protected string $title;
    public protected(set) string $author;
    protected private(set) int $pubYear;
}

class SpecialBook extends Book
{
    public protected(set) $title; // Все гаразд. Видимість читання ширша, а запису така сама.
    public string $author; // Все гаразд. Видимість така сама, а читання ширша.
    public protected(set) int $pubYear; // Фатальна помилка. властивість з видимістю private(set) є фінальною.
}
?>
]]>
     </programlisting>
    </example>
   </sect3>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Видимість метода</title>
   <para>
    Методи класу можуть бути визначені як public, private чи protected. Метод,
    оголошений без ключового слова видимості, вважається загальнодоступним.
   </para>
   <example>
    <title>Оголошення метода</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Визначення MyClass
 */
class MyClass
{
    // Оголошення загальнодоступного конструктора
    public function __construct() { }

    // Оголошення загальнодоступного методу
    public function MyPublic() { }

    // Оголошення захищеного методу
    protected function MyProtected() { }

    // Оголошення закритого методу
    private function MyPrivate() { }

    // Таке оголошення метода буде оброблятись як public метод
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Працює
$myclass->MyProtected(); // Фатальна помилка
$myclass->MyPrivate(); // Фатальна помилка
$myclass->Foo(); // Працюють Public, Protected та Private методи


/**
 * Визначення MyClass2
 */
class MyClass2 extends MyClass
{
    // Таке оголошення методу буде оброблятись як public
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Фатальна помилка
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Працює
$myclass2->Foo2(); // Працюють методи Public та Protected, але не Private

class Bar 
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar 
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new Foo();
$myFoo->test(); // Bar::testPrivate 
                // Foo::testPublic
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-constants">
   <title>Видимість констант</title>
   <para>
    Починаючи з PHP 7.1.0, константи класу можуть оголошуватись як public,
    private чи protected. Константа, оголошена без ключового слова видимості,
    вважається загальнодоступною.
   </para>
   <example>
    <title>Оголошення констант, починаючи з PHP 7.1.0</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Define MyClass
 */
class MyClass
{
    // Оголошення загальнодоступної константи
    public const MY_PUBLIC = 'public';

    // Оголошення захищеної константи
    protected const MY_PROTECTED = 'protected';

    // Оголошення закритої константи
    private const MY_PRIVATE = 'private';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

$myclass = new MyClass();
MyClass::MY_PUBLIC; // Працює
MyClass::MY_PROTECTED; // Фатальна помилка
MyClass::MY_PRIVATE; // Фатальна помилка
$myclass->foo(); // Працюють Public, Protected та Private


/**
 * Визначення MyClass2
 */
class MyClass2 extends MyClass
{
    // Це публічний метод
    function foo2()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE; // Фатальна помилка
    }
}

$myclass2 = new MyClass2;
echo MyClass2::MY_PUBLIC; // Працює
$myclass2->foo2(); // Працюють константи Public та Protected, але не Private
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>Видимість з інших об'єктів</title>
   <para>
    Однотипні об'єкти мають доступ до методів та властивостей один одного, що
    оголошені як private або protected, навіть якщо ці об'єкти не є одним і тим
    же примірником. Це пояснюється тим, що впровадження механізму видимості
    відбувається відносно класів цих об'єктів, а не відносно самих об'єктів.
   </para>
   <example>
    <title>Доступ до закритих членів класу, що мають однаковий тип об'єкта</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Доступ до закритого методу.';
    }

    public function baz(Test $other)
    {
        // Ми можемо змінити закриту властивість:
        $other->foo = 'привіт';
        var_dump($other->foo);

        // Ми також можемо викликати закритий метод:
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(12) "привіт"
Доступ до закритого методу.
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
